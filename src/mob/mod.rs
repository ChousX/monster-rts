use bevy::{prelude::*};
use crate::share::GameState;

mod actions;
mod perseptions;
mod thinking;

pub use actions::*;
pub use perseptions::*;
pub use  thinking::*;

pub struct MobPlugin;
impl Plugin for MobPlugin{
    fn build(&self, app: &mut App) {
        app
            .add_event::<MobPerseptionEvent>()
            .add_event::<MobMoveEvent>()
            .add_system_set(SystemSet::on_enter(GameState::MainGame).with_system(mtest))
        ;
    }
}

#[derive(Component)]
//might want this to be a enum in a bit
pub struct Mob;



//TODO: construct sprites for mobs I am thinking compositing later on for now just a square will do  LATER
//TODO: Spawn mobs and attach sprites
//TODO: Mob minimum movement logic can only walk on tiles
pub fn mtest(    mut commands: Commands,
    mut asset_server: ResMut<AssetServer>,){
    spawn_mob(&mut commands, 10., -10., &mut asset_server);
}
pub fn spawn_mob(commands: &mut Commands, x: f32, y:f32, asset_server: &mut ResMut<AssetServer>){
    let handle: Handle<Image> = asset_server.load(r"textures\temp\5.png");
    commands
        .spawn()
        .insert_bundle(SpriteBundle{
            sprite: Sprite {..Default::default()},
            transform: Transform::from_translation(Vec3::new(x, y, 1.0)),
            texture: handle,
            ..Default::default()
        })
        .insert(Mob)
    ;
}


// sences are going to generate MobPerseptionEvent
// they will be generated by more than one function
// then AI stuff that genartats action events



